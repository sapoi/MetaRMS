<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Core.Cache.ReferenceCache">
            <summary>
            This cache is used by DataHelper and it creates and stores text representation of references 
            that can be later send to the client.
            </summary>
        </member>
        <member name="F:Core.Cache.ReferenceCache.applicationModel">
            <summary>
            Model of application the data belongs to.
            </summary>
        </member>
        <member name="F:Core.Cache.ReferenceCache.userRepository">
            <summary>
            User repository used to access user data in the database.
            </summary>
        </member>
        <member name="F:Core.Cache.ReferenceCache.dataRepository">
            <summary>
            Data repository used to access dataset data in the database.
            </summary>
        </member>
        <member name="M:Core.Cache.ReferenceCache.#ctor(Core.DatabaseContext,SharedLibrary.Models.ApplicationModel)">
            <summary>
            ReferenceCache constructor prepares repositories and the cache.
            </summary>
            <param name="databaseContext">Database context used to access the database</param>
            <param name="applicationModel">Model of application</param>
        </member>
        <member name="M:Core.Cache.ReferenceCache.GetTextForReference(System.String,System.Int64,System.Int32)">
            <summary>
            This method creates text representation of a reference from database.
            </summary>
            <param name="referenceType">Type of the reference</param>
            <param name="referenceId">Id to get the text representation for</param>
            <param name="level">Current depth of looking for the reference</param>
            <returns>String representation of the reference.</returns>
        </member>
        <member name="M:Core.Cache.ReferenceCache.addToCache(System.String,System.Int64,System.String)">
            <summary>
            This method adds found value to the cache.
            </summary>
            <param name="type">Type of the value</param>
            <param name="id">Id of the value</param>
            <param name="value">The value itself</param>
        </member>
        <member name="F:Core.Controllers.Account.ApplicationDescriptorController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Account.ApplicationDescriptorController.Get">
            <summary>
            API endpoint for getting application descriptor for authenticated user.
            </summary>
            <returns>ApplicationDescriptor</returns>
            <response code="200">Returns application descriptor</response>
            <response code="401">If user is not authenticated</response>
        </member>
        <member name="F:Core.Controllers.Account.LoginController.configuration">
            <summary>
            Application configuration properties
            </summary>
        </member>
        <member name="F:Core.Controllers.Account.LoginController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Account.LoginController.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Core.DatabaseContext)">
            <summary>
            Constructor for initializing configuration and database context.
            </summary>
            <param name="configuration"></param>
            <param name="context"></param>
        </member>
        <member name="M:Core.Controllers.Account.LoginController.Login(SharedLibrary.Structures.LoginCredentials)">
            <summary>
            API endpoint for log in.
            </summary>
            <param name="loginCredentials">Credentials to log int the application</param>
            <returns></returns>
            <response code="200">If user successfully authenticated</response>
            <response code="400">If input is not valid</response>
        </member>
        <member name="F:Core.Controllers.Account.LogoutController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Account.LogoutController.Logout">
            <summary>
            API endpoint for user logout.
            </summary>
            <returns>Error of info message about action result</returns>
            <response code="200">If user was successfully logged out</response>
        </member>
        <member name="F:Core.Controllers.Account.RightsController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Account.RightsController.GetByIdFromToken">
            <summary>
            API endpoint for getting rights for authenticated user.
            </summary>
            <returns>User RightsModel</returns>
            <response code="200">Returns user rights</response>
            <response code="401">If user is not authenticated</response>
        </member>
        <member name="F:Core.Controllers.Account.Settings.PasswordController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Account.Settings.PasswordController.PasswordChange(SharedLibrary.Structures.PasswordChangeStructure)">
            <summary>
            API endpoint for password change.
            </summary>
            <param name="passwords">PasswordChangeStructure with passwords</param>
            <returns>Error of info message about action result</returns>
            <response code="200">If password successfully changed</response>
            <response code="400">If input passwords are not valid</response>
            <response code="401">If user is not authenticated</response>
        </member>
        <member name="F:Core.Controllers.AppInitController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.AppInitController.Create(System.String,Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            API endpoint for creating new application.
            </summary>
            <param name="email">Email address to send the login data to</param>
            <param name="file">File containing application descriptor in JSON format</param>
            <returns>Messages about action result</returns>
            <response code="200">If application successfully created</response>
            <response code="400">If input is not valid</response>
        </member>
        <member name="F:Core.Controllers.Data.CreateController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Data.CreateController.Create(SharedLibrary.Models.DataModel)">
            <summary>
            API endpoint for creating data.
            </summary>
            <param name="fromBodyDataModel">New DataModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If data successfully created</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to create data</response>
        </member>
        <member name="F:Core.Controllers.Data.DeleteController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Data.DeleteController.DeleteById(System.Int64,System.Int64)">
            <summary>
            API endpoint for deleting data.
            </summary>
            <param name="datasetId">Id of dataset the data are from</param>
            <param name="id">Id of the data</param>
            <returns>Messages about action result</returns>
            <response code="200">If data successfully deleted</response>
            <response code="400">If input is not valid or data can not be deleted</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to delete data</response>
        </member>
        <member name="F:Core.Controllers.Data.GetController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Data.GetController.GetAll(System.Int64)">
            <summary>
            API endpoint for getting all data by dataset id.
            </summary>
            <param name="datasetId">Id of dataset to get the data from</param>
            <returns>List of DataModels or messages about action result</returns>
            <response code="200">If data successfully sent</response>
            <response code="400">If datasetId is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read data</response>
        </member>
        <member name="M:Core.Controllers.Data.GetController.GetById(System.Int64,System.Int64)">
            <summary>
            API endpoint for getting data by dataset id and data id.
            </summary>
            <param name="datasetId">Id of dataset the data are from</param>
            <param name="id">Id of the data to get</param>
            <returns>DataModel or messages about action result</returns>
            <response code="200">If data successfully sent</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read data</response>
            <response code="400">If datasetId and/or id is not valid</response>
        </member>
        <member name="F:Core.Controllers.Data.PutController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Data.PutController.Put(SharedLibrary.Models.DataModel)">
            <summary>
            API endpoint for putting data.
            </summary>
            <param name="fromBodyDataModel">Changed DataModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If data successfully putted</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to put data</response>
        </member>
        <member name="F:Core.Controllers.Rights.CreateController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Rights.CreateController.Create(SharedLibrary.Models.RightsModel)">
            <summary>
            API endpoint for creating rights.
            </summary>
            <param name="fromBodyRightsModel">New RightsModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If rights successfully created</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to create rights</response>
        </member>
        <member name="F:Core.Controllers.Rights.DeleteController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Rights.DeleteController.DeleteById(System.Int64)">
            <summary>
            API endpoint for deleting rights.
            </summary>
            <param name="id">Id of rights to delete</param>
            <returns>Messages about action result</returns>
            <response code="200">If rights successfully deleted</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to delete rights</response>
        </member>
        <member name="F:Core.Controllers.Rights.GetController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Rights.GetController.GetAll">
            <summary>
            API endpoint for getting all rights for application.
            </summary>
            <returns>List of RightsModel or messages about action result</returns>
            <response code="200">If rights successfully sent</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read rights</response>
        </member>
        <member name="M:Core.Controllers.Rights.GetController.GetById(System.Int64)">
            <summary>
            API endpoint for getting rights by id.
            </summary>
            <param name="id">Id of rights to get</param>
            <returns>RightsModel or messages about action result</returns>
            <response code="200">If rights successfully sent</response>
            <response code="400">If id is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read rights</response>
        </member>
        <member name="F:Core.Controllers.Rights.PutController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.Rights.PutController.Put(SharedLibrary.Models.RightsModel)">
            <summary>
            API endpoint for putting rights.
            </summary>
            <param name="fromBodyRightsModel">Changed RightsModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If rights successfully putted</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to put rights</response>
        </member>
        <member name="F:Core.Controllers.User.CreateController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.User.CreateController.Create(SharedLibrary.Models.UserModel)">
            <summary>
            API endpoint for creating user.
            </summary>
            <param name="fromBodyUserModel">New UserModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If user successfully created</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to create users</response>
        </member>
        <member name="F:Core.Controllers.User.DeleteController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.User.DeleteController.DeleteById(System.Int64)">
            <summary>
            API endpoint for deleting users.
            </summary>
            <param name="id">Id of user to delete</param>
            <returns>Messages about action result</returns>
            <response code="200">If user successfully deleted</response>
            <response code="400">If input is not valid or user can not be deleted</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to delete users</response>
        </member>
        <member name="F:Core.Controllers.User.GetController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.User.GetController.GetAll">
            <summary>
            API endpoint for getting all users for application.
            </summary>
            <returns>List of UserModel or messages about action result</returns>
            <response code="200">If users successfully sent</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read users</response>
        </member>
        <member name="M:Core.Controllers.User.GetController.GetById(System.Int64)">
            <summary>
            API endpoint for getting user by id.
            </summary>
            <param name="id">Id of user to get</param>
            <returns>UserModel or messages about action result</returns>
            <response code="200">If user successfully sent</response>
            <response code="400">If id is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to read users</response>
        </member>
        <member name="F:Core.Controllers.User.PutController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.User.PutController.Put(SharedLibrary.Models.UserModel)">
            <summary>
            API endpoint for putting user.
            </summary>
            <param name="fromBodyUserModel">Changed UserModel</param>
            <returns>Messages about action result</returns>
            <response code="200">If user successfully putted</response>
            <response code="400">If input is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to put users</response>
        </member>
        <member name="F:Core.Controllers.User.ResetPasswordController.context">
            <summary>
            Database context for repository.
            </summary>
        </member>
        <member name="M:Core.Controllers.User.ResetPasswordController.ResetPasswordById(System.Int64)">
            <summary>
            API endpoint resetting user password.
            </summary>
            <param name="id">Id of user to reset the password</param>
            <returns>Messages about action result</returns>
            <response code="200">If user pasword was sucessfully reset</response>
            <response code="400">If id is not valid</response>
            <response code="401">If user is not authenticated</response>
            <response code="403">If user is not autorized to reset user passwords</response>
        </member>
        <member name="T:Core.Helpers.AccessHelper">
            <summary>
            AccessHelper is used by the Razor pages. This helper contains methods neccessary to provide access to 
            individual parts of the application based on rights of the logged user and the application descriptor.
            </summary>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetTokenFromPageModel(Microsoft.AspNetCore.Mvc.RazorPages.PageModel)">
            <summary>
            This method validates if the page model contains correct token.
            </summary>
            <param name="model">Page model to get the token from</param>
            <returns>Valid token or null</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetApplicationDescriptor(Microsoft.Extensions.Caching.Memory.IMemoryCache,SharedLibrary.Services.IAccountService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method gets returns application descriptor based on application id in token.
            If no descriptor is found, null is returned.
            </summary>
            <param name="cache">Cache to get the descriptor from</param>
            <param name="accountService">Account service used for loading the descriptor if not present in the cache</param>
            <param name="token">Token for authentication on the server side</param>
            <returns>Application descriptor or null</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetUserRights(Microsoft.Extensions.Caching.Memory.IMemoryCache,SharedLibrary.Services.IAccountService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method gets returns user rights dictionary based on rights id in token.
            If no rights are found, null is returned.
            </summary>
            <param name="cache">Cache to get the rights from</param>
            <param name="accountService">Account service used for loading the rights if not present in the cache</param>
            <param name="token">Token for authentication on the server side</param>
            <returns>Rights dictionary or null</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetReadAuthorizedUserDefinedDatasets(SharedLibrary.Descriptors.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.Int64,SharedLibrary.Enums.RightsEnum})">
            <summary>
            This method returns list of user-defined dataset descriptors that can be read by the user with rights from the parameter.
            </summary>
            <param name="applicationDescriptor">Application descriptor containing all available datasets</param>
            <param name="rights">Rights dictionary with rights for each dataset from application descriptor</param>
            <returns>List of user-defined dataset descriptors with at least R rights</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetSystemDatasetsRightsDict(System.Collections.Generic.Dictionary{System.Int64,SharedLibrary.Enums.RightsEnum})">
            <summary>
            This method returns dictionary or rights for system datasets. At the moment rights for 
            Users and Rights datasets are returned.
            </summary>
            <param name="rights">Rights dictionary with rights for each dataset from application descriptor</param>
            <returns>Dictionary of rights for system datasets</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetMenuData(SharedLibrary.Descriptors.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.Int64,SharedLibrary.Enums.RightsEnum})">
            <summary>
            This method fills LoggedMenuPartialData structure with values based on application descriptor and
            rights provided in the parametres.
            </summary>
            <param name="applicationDescriptor">Application descriptor to fill the structure from</param>
            <param name="rights">Rights dictionary of user that wants the LoggedMenuPartialData</param>
            <returns>Filled LoggedMenuPartialData structure</returns>
        </member>
        <member name="M:Core.Helpers.AccessHelper.GetActiveDatasetDescriptor(SharedLibrary.Descriptors.ApplicationDescriptor,System.Collections.Generic.Dictionary{System.Int64,SharedLibrary.Enums.RightsEnum},System.String)">
            <summary>
            This function returns dataset descriptor based on datasetName parameter.static If this parameter is not specified
            descriptor of first dataset with at least read rights is returned.
            </summary>
            <param name="applicationDescriptor">Application descriptor to get the dataset descriptor from</param>
            <param name="rights">Rights of the user that wants the dataset</param>
            <param name="datasetName">Optional name of the dataset to get</param>
            <returns>Dataset descriptor based on its name or first with at least read rights</returns>
        </member>
        <member name="M:Core.Helpers.AppInitHelper.GetDefaultAdminDataDictionary(SharedLibrary.Descriptors.UsersDatasetDescriptor)">
            <summary>
            Creates a JSON formatted string of admin data containing username admin and wit all the other attributes blank
            </summary>
            <param name="usersDatasetDescriptor">User dataset descriptor of the new application</param>
            <returns>Default user data for admin user</returns>
        </member>
        <member name="M:Core.Helpers.AppInitHelper.GetAdminRights(SharedLibrary.Models.ApplicationModel,SharedLibrary.Descriptors.ApplicationDescriptor)">
            <summary>
            Returns default rights for admin
            </summary>
            <param name="applicationModel">Model of application the rights belongs to</param>
            <param name="applicationDescriptor">Descriptor of the application</param>
            <returns>Admin RightsModel</returns>
        </member>
        <member name="M:Core.Helpers.AppInitHelper.SendEmailWithCredentials(System.String,System.String,System.String,System.String)">
            <summary>
            Sends confirmation email about application creation to provided email address
            </summary>
            <param name="email">Email address to end the email to</param>
            <param name="applicationName">Name of the application</param>
            <param name="loginApplicationName">Login name of the application</param>
            <param name="password">Admin password</param>
        </member>
        <member name="T:Core.Helpers.CacheHelper">
            <summary>
            CacheHelper is used by the Razor pages to get application descriptors and user rights from the cache.
            </summary>
        </member>
        <member name="F:Core.Helpers.CacheHelper.cacheKeys">
            <summary>
            List of keys currently present in the cache
            </summary>
        </member>
        <member name="M:Core.Helpers.CacheHelper.GetApplicationDescriptorFromCacheAsync(Microsoft.Extensions.Caching.Memory.IMemoryCache,SharedLibrary.Services.IAccountService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method gets returns application descriptor based on application id in token.
            If no descriptor is found, null is returned.
            </summary>
            <param name="cache">Cache to get the descriptor from</param>
            <param name="accountService">Account service used for loading the descriptor if not present in the cache</param>
            <param name="token">Token for authentication on the server side</param>
            <returns>ApplicationDescriptor or null</returns>
        </member>
        <member name="M:Core.Helpers.CacheHelper.GetRightsFromCacheAsync(Microsoft.Extensions.Caching.Memory.IMemoryCache,SharedLibrary.Services.IAccountService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method gets returns user rights based on rights id in token.
            If no rights are found, null is returned.
            </summary>
            <param name="cache">Cache to get the rights from</param>
            <param name="accountService">Account service used for loading the rights if not present in the cache</param>
            <param name="token">Token for authentication on the server side</param>
            <returns>RightsModel or null</returns>
        </member>
        <member name="M:Core.Helpers.CacheHelper.RemoveRightsFromCache(Microsoft.Extensions.Caching.Memory.IMemoryCache,System.Int64)">
            <summary>
            This method removes all Constants.CacheRightsPrefix + application entries from cache.
            </summary>
            <param name="cache">Cache to delete from</param>
            <param name="applicationId">For which application to delete the rights</param>
        </member>
        <member name="T:Core.Helpers.ControllerHelper">
            <summary>
            ControllerHelper contains methods used by controllers on the server. 
            </summary>
        </member>
        <member name="M:Core.Helpers.ControllerHelper.#ctor(Core.DatabaseContext)">
            <summary>
            ControllerHelper constructor.
            </summary>
            <param name="databaseContext">Database context to be used to perform database queries</param>
        </member>
        <member name="M:Core.Helpers.ControllerHelper.Authenticate(System.Security.Claims.ClaimsIdentity)">
            <summary>
            This method returns user accessing controller.
            </summary>
            <param name="identity">ClaimsPrincipal item recieved in controller.</param>
            <returns>UserModel or null if no user was found.</returns>
        </member>
        <member name="M:Core.Helpers.ControllerHelper.GetAllReferencesIdsDictionary(SharedLibrary.Models.ApplicationModel)">
            <summary>
            This method returns dictionary of valid references for each dataset (including system users dataset). 
            This can be later used for valid references validation.
            </summary>
            <param name="applicationModel">Application to get the valid references for</param>
            <returns>Dictionary with dataset name as key and valid ids for the dataset as value.</returns>
        </member>
        <member name="M:Core.Helpers.ControllerHelper.IfCanBeDeletedPerformDeleteActions(SharedLibrary.Models.UserModel,SharedLibrary.Models.IBaseModelWithApplicationAndData)">
            <summary>
            This method checks if modelToDelete can be deleted. It finds all models where modelToDelete is
            referenced and based on the OnDeleteAction it recursively deletes or sets to emty those models.
            If the OnDeleteAction is protect, the deletion process is stopped.
            </summary>
            <param name="authUserModel">Authenticated user model</param>
            <param name="modelToDelete">Model to be deleted</param>
            <returns>
            True if modelToDelete can be deleted, false otherwise. Also operations on models that should be referenced
            or should have referenced removed are performed in the database context.
            </returns>
        </member>
        <member name="M:Core.Helpers.ControllerHelper.getAllReferencing(SharedLibrary.Models.ApplicationModel,SharedLibrary.Models.IBaseModelWithApplicationAndData)">
            <summary>
            This method returns all models that use modelToBeReferenced as a reference.
            </summary>
            <param name="applicationModel">Model of authenticated user's application</param>
            <param name="modelToBeReferenced">Model whose references to return</param>
            <returns>List of models that have model from parameter as a reference.</returns>
        </member>
        <member name="T:Core.Helpers.HTMLSelectHelper">
            <summary>
            This helper is used by Razor pages for loading additional values for selects.
            </summary>
        </member>
        <member name="M:Core.Helpers.HTMLSelectHelper.FillUserRightsData(SharedLibrary.Services.IRightsService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method is used to load all available RightsModels for an application from the server.
            These models are then converted to the list of SelectListItem that can be used in HTML
            selects to pick a rights for user.
            </summary>
            <param name="rightsService">Rights service to conntect to the server</param>
            <param name="token">JWT token to authenticate at the server</param>
            <returns>List of SelectListItem</returns>
        </member>
        <member name="M:Core.Helpers.HTMLSelectHelper.FillSelectData(SharedLibrary.Descriptors.ApplicationDescriptor,System.Collections.Generic.List{SharedLibrary.Descriptors.AttributeDescriptor},SharedLibrary.Services.IUserService,SharedLibrary.Services.IDataService,SharedLibrary.Structures.JWTToken)">
            <summary>
            This method is used to load all available DataModels and UserModels for an application
            from the server. These models are converted to a list of SelectListItem that can be used
            in HTML selects.
            </summary>
            <param name="applicationDescriptor">Descriptor of application to load the data from</param>
            <param name="attributes">Attributes to load the values for</param>
            <param name="userService">User service to conntect to the server</param>
            <param name="dataService">Data service to conntect to the server</param>
            <param name="token">JWT token to authenticate at the server</param>
            <returns>Dictionary with attribute types as key and list of the available values as a value.</returns>
        </member>
        <member name="M:Core.Helpers.HTMLSelectHelper.getTextForSelectItem(System.Collections.Generic.List{SharedLibrary.Descriptors.AttributeDescriptor},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            This method returns string representation of a data dictionary based on its attributes.
            </summary>
            <param name="shownAttributes">List of attributes that will be displayed at the text</param>
            <param name="dataDictionary">Dictionary to get the text values from</param>
            <returns>String value from given parametres</returns>
        </member>
        <member name="M:Core.Helpers.ValidationHelper.ValidateDataDictionary(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.String}},System.Collections.Generic.List{SharedLibrary.Descriptors.AttributeDescriptor})">
            <summary>
            This method validates and adds missing attributes values to data dictionary received from the Razor pages.
            </summary>
            <param name="dataDictionary">Data dictionary to validate</param>
            <param name="attributes">List of attributes that are required to be in the dataDictioanry</param>
        </member>
        <member name="P:Core.DatabaseContext.ApplicationDbSet">
            <summary>
            Database set representing applications table.
            </summary>
            <value>ApplicationModel DbSet</value>
        </member>
        <member name="P:Core.DatabaseContext.UserDbSet">
            <summary>
            Database set representing users table.
            </summary>
            <value>UserModel DbSet</value>
        </member>
        <member name="P:Core.DatabaseContext.DataDbSet">
            <summary>
            Database set representing data table.
            </summary>
            <value>DataModel DbSet</value>
        </member>
        <member name="P:Core.DatabaseContext.RightsDbSet">
            <summary>
            Database set representing rights table.
            </summary>
            <value>RightsModel DbSet</value>
        </member>
        <member name="M:Core.DatabaseContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            This method sets delete behavior to each model.
            </summary>
            <param name="modelBuilder">ModelBuilder to use</param>
        </member>
        <member name="T:Core.Pages.Account.LogoutModel">
            <summary>
            The LogoutModel class in Core.Pages.Account namespace is used as support for Logout.cshtml page. 
            The page is used to log out a logged user.
            </summary>
        </member>
        <member name="F:Core.Pages.Account.LogoutModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="M:Core.Pages.Account.LogoutModel.#ctor(SharedLibrary.Services.IAccountService)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="accountService">Account service to be used</param>
        </member>
        <member name="M:Core.Pages.Account.LogoutModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to Account/Logout.cshtml page
            </summary>
            <returns>Redirect to index page after user is logged out.</returns>
        </member>
        <member name="T:Core.Pages.Account.SettingsModel">
            <summary>
            The SettingsModel class in Core.Pages.Account namespace is used as support for Settings.cshtml page. 
            The page is used to change existing password of the logged user.
            </summary>
        </member>
        <member name="F:Core.Pages.Account.SettingsModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Account.SettingsModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Account.SettingsModel.#ctor(SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Account.SettingsModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Account.SettingsModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Account.SettingsModel.PasswordChangeStructure">
            <summary>
            Structure containing old and new passwords.
            </summary>
            <value>PasswordChangeStructure structure</value>
        </member>
        <member name="P:Core.Pages.Account.SettingsModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Account.SettingsModel.OnGetAsync(System.String)">
            <summary>
            This method is used when there is a GET request to Account/Settings.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Account.SettingsModel.OnPostAsync(System.String)">
            <summary>
            OnPostAsync method is invoked after clicking on Change button.
            </summary>
            <returns>Redirect to the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.Appinit.IndexModel">
            <summary>
            The IndexModel class in Core.Pages.AppInit namespace is used as support for Index.cshtml page. 
            The page is used to create a new application.
            </summary>
        </member>
        <member name="F:Core.Pages.Appinit.IndexModel.appInitService">
            <summary>
            Service for application initialization request to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Appinit.IndexModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Appinit.IndexModel.#ctor(SharedLibrary.Services.IAppInitService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing service and cache.
            </summary>
            <param name="appInitService">Application initialization service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Appinit.IndexModel.FileUpload">
            <summary>
            File containing application descriptor in JSON fromat.
            </summary>
            <value>File in JSON format</value>
        </member>
        <member name="P:Core.Pages.Appinit.IndexModel.Email">
            <summary>
            Email address to send the login credentials to.
            </summary>
            <value>String email address</value>
        </member>
        <member name="P:Core.Pages.Appinit.IndexModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Appinit.IndexModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to AppInit/Index.cshtml page.
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Appinit.IndexModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Index page or the same page with validation messages.</returns>
        </member>
        <member name="T:Core.Pages.Data.CreateModel">
            <summary>
            The CreateModel class in Core.Pages.Data namespace is used as support for Create.cshtml page. 
            The page is used to create new application data for dataset.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.CreateModel.dataService">
            <summary>
            Service for DataModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.CreateModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.CreateModel.userService">
            <summary>
            Service for user based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.CreateModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Data.CreateModel.#ctor(SharedLibrary.Services.IDataService,SharedLibrary.Services.IAccountService,SharedLibrary.Services.IUserService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="dataService">Data service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="userService">User service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.DatasetName">
            <summary>
            DatasetName property contains name of dataset the new data belongs to.
            </summary>
            <value>string containing dataset name</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.NewDataDictionary">
            <summary>
            Dictionary containing string attribute name as key and list of strings as the values.
            </summary>
            <value>Dictionary of string and list of strings</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.SelectData">
            <summary>
            SelectData property contains data used for select html input fields.
            The key is attribute type and value is list of possible select values.
            </summary>
            <value>Dictionary string and list of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.ActiveDatasetDescriptor">
            <summary>
            ActiveDatasetDescriptor property contains descriptor of currently selected dataset.
            </summary>
            <value>DatasetDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Data.CreateModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Data.CreateModel.OnGetAsync(System.String)">
            <summary>
            This method is used when there is a GET request to Data/Create.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Data.CreateModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.Data.EditModel">
            <summary>
            The EditModel class in Core.Pages.Data namespace is used as support for Edit.cshtml page. 
            The page is used to edit existing application data for dataset.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.EditModel.dataService">
            <summary>
            Service for DataModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.EditModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.EditModel.userService">
            <summary>
            Service for user based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.EditModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Data.EditModel.#ctor(SharedLibrary.Services.IDataService,SharedLibrary.Services.IAccountService,SharedLibrary.Services.IUserService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="dataService">Data service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="userService">User service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Data.EditModel.DataId">
            <summary>
            Id of the data to edit.
            </summary>
            <value>long</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.DatasetName">
            <summary>
            DatasetName property contains name of dataset the new data belongs to.
            </summary>
            <value>string containing dataset name</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.DataDictionary">
            <summary>
            Dictionary containing string attribute name as key and list of objects as the values.
            </summary>
            <value>Dictionary of string and list of strings</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.SelectData">
            <summary>
            SelectData property contains data used for select html input fields.
            The key is attribute type and value is list of possible select values.
            </summary>
            <value>Dictionary string and list of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.ActiveDatasetDescriptor">
            <summary>
            ActiveDatasetDescriptor property contains descriptor of currently selected dataset.
            </summary>
            <value>DatasetDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Data.EditModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Data.EditModel.OnGetAsync(System.String,System.Int64)">
            <summary>
            This method is used when there is a GET request to Data/Edit.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Data.EditModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.Data.GetModel">
            <summary>
            The GetModel class in Core.Pages.Data namespace is used as support for Get.cshtml page. 
            The page is used to display all application data for user-defined datasets, as well as create, 
            edit and delete action buttons.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.GetModel.dataService">
            <summary>
            Service for DataModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.GetModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Data.GetModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Data.GetModel.#ctor(SharedLibrary.Services.IDataService,SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="dataService">Data service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Data.GetModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.GetModel.ActiveDatasetDescriptor">
            <summary>
            ActiveDatasetDescriptor property contains descriptor of currently selected dataset.
            </summary>
            <value>DatasetDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Data.GetModel.Data">
            <summary>
            Data property contains list of DataModel to be displayed in a data table.
            </summary>
            <value>List of DataModel</value>
        </member>
        <member name="P:Core.Pages.Data.GetModel.ActiveDatasetRights">
            <summary>
            ActiveDatasetRights property conatins user's rights to the active dataset. 
            This value is used for displaying Create, Edit and Delete buttons.
            </summary>
            <value>RightsEnum value.</value>
        </member>
        <member name="P:Core.Pages.Data.GetModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Data.GetModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Data.GetModel.OnGetAsync(System.String)">
            <summary>
            This method is used when there is a GET request to Data/Get.cshtml page.
            </summary>
            <param name="datasetName">Name of dataset to display data from</param>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Data.GetModel.OnPostDataEditAsync(System.String,System.String)">
            <summary>
            OnPostDataEditAsync method is invoked after clicking on Edit button
            and redirects user to edit page.
            </summary>
            <param name="datasetName">Name of dataset to edit the data from</param>
            <param name="dataId">Id of data to edit</param>
            <returns>Redirect to edit page.</returns>
        </member>
        <member name="M:Core.Pages.Data.GetModel.OnPostDataDeleteAsync(System.String,System.Int64)">
            <summary>
            OnPostDataDeleteAsync method is invoked after clicking on Delete button.
            </summary>
            <param name="datasetName">Name of dataset that the data are from</param>
            <param name="dataId">Id of data to be deleted</param>
            <returns>Login page or a page with messages</returns>
        </member>
        <member name="M:Core.Pages.Data.GetModel.OnPostDataCreateAsync(System.String)">
            <summary>
            OnPostDataCreateAsync method is invoked after clicking on Create button
            and redirects user to create page.
            </summary>
            <param name="datasetName">Name of dataset to create data to</param>
            <returns>Redirect to create page.</returns>
        </member>
        <member name="T:Core.Pages.ErrorModel">
            <summary>
            The ErrorModel class in Core.Pages namespace is used as support for Error.cshtml page. 
            The page is used to display server error annoucement.
            </summary>
        </member>
        <member name="M:Core.Pages.ErrorModel.#ctor">
            <summary>
            Constructor for initializing model.
            </summary>
        </member>
        <member name="M:Core.Pages.ErrorModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to Error.cshtml page.
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="T:Core.Pages.IndexModel">
            <summary>
            The IndexModel class in Core.Pages namespace is used as support for Index.cshtml page. 
            The page is used to display login form.
            </summary>
        </member>
        <member name="F:Core.Pages.IndexModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.IndexModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.IndexModel.#ctor(SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.IndexModel.LoginCredentials">
            <summary>
            Login credentials from input.
            </summary>
            <value>Login credentials class instance</value>
        </member>
        <member name="P:Core.Pages.IndexModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.IndexModel.OnGet">
            <summary>
            This method is used when there is a GET request to Index.cshtml page.
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.IndexModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Log in button.
            </summary>
            <returns>Redirect to Data/Get page or the same page with validation messages.</returns>
        </member>
        <member name="T:Core.Pages.Rights.CreateModel">
            <summary>
            The CreateModel class in Core.Pages.Rights namespace is used as support for Create.cshtml page. 
            The page is used to create new application rights.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.CreateModel.rightsService">
            <summary>
            Service for RightsModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.CreateModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.CreateModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Rights.CreateModel.#ctor(SharedLibrary.Services.IRightsService,SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="rightsService">Rights service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Rights.CreateModel.NewRightsName">
            <summary>
            Name of the new rights.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Core.Pages.Rights.CreateModel.NewRightsDictionary">
            <summary>
            Dictionary containing rights value for each dataset.
            </summary>
            <value>Dictionary of long and RightsEnum</value>
        </member>
        <member name="P:Core.Pages.Rights.CreateModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Rights.CreateModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Rights.CreateModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Rights.CreateModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to Rights/Create.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Rights.CreateModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.Rights.EditModel">
            <summary>
            The EditModel class in Core.Pages.Rights namespace is used as support for Edit.cshtml page. 
            The page is used to edit existing application rights.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.EditModel.rightsService">
            <summary>
            Service for RightsModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.EditModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.EditModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Rights.EditModel.#ctor(SharedLibrary.Services.IRightsService,SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="rightsService">Rights service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.RightsId">
            <summary>
            Id of the rights to edit.
            </summary>
            <value>long</value>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.RightsName">
            <summary>
            New name of the rights.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.RightsDictionary">
            <summary>
            Dictionary containing rights value for each dataset.
            </summary>
            <value>Dictionary of long and RightsEnum</value>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Rights.EditModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Rights.EditModel.OnGetAsync(System.Int64)">
            <summary>
            This method is used when there is a GET request to Rights/Edit.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Rights.EditModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.Rights.GetModel">
            <summary>
            The GetModel class in Core.Pages.Rights namespace is used as support for Get.cshtml page. 
            The page is used to display all application rights, as well as create, edit and delete action buttons.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.GetModel.rightsService">
            <summary>
            Service for RightsModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.GetModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.Rights.GetModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.Rights.GetModel.#ctor(SharedLibrary.Services.IRightsService,SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="rightsService">Rights service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.Rights.GetModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.Rights.GetModel.Data">
            <summary>
            Data property contains list of RightsModel to be displayed in a data table.
            </summary>
            <value>List of RightsModel</value>
        </member>
        <member name="P:Core.Pages.Rights.GetModel.RightsRights">
            <summary>
            RightsRights property conatins user's rights to the rights dataset.async 
            This value is used for displaying Create, Edit and Delete buttons.
            </summary>
            <value>RightsEnum value.</value>
        </member>
        <member name="P:Core.Pages.Rights.GetModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.Rights.GetModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.Rights.GetModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to Rights/Get.cshtml page.
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.Rights.GetModel.OnPostRightsDeleteAsync(System.Int64)">
            <summary>
            OnPostRightsDeleteAsync method is invoked after clicking on Delete button.
            </summary>
            <param name="dataId">Id of data to be deleted</param>
            <returns>Login page or a page with messages</returns>
        </member>
        <member name="M:Core.Pages.Rights.GetModel.OnPostRightsCreateAsync">
            <summary>
            OnPostRightsCreateAsync method is invoked after clicking on Create button
            and redirects user to create page.
            </summary>
            <returns>Redirect to create page.</returns>
        </member>
        <member name="M:Core.Pages.Rights.GetModel.OnPostRightsEditAsync(System.String)">
            <summary>
            OnPostRightsEditAsync method is invoked after clicking on Edit button 
            and redirects user to edit page.
            </summary>
            <returns>Redirect to edit page.</returns>
        </member>
        <member name="T:Core.Pages.User.CreateModel">
            <summary>
            The CreateModel class in Core.Pages.User namespace is used as support for Create.cshtml page. 
            The page is used to create new application user.
            </summary>
        </member>
        <member name="F:Core.Pages.User.CreateModel.userService">
            <summary>
            Service for user based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.CreateModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.CreateModel.rightsService">
            <summary>
            Service for RightsModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.CreateModel.dataService">
            <summary>
            Service for DataModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.CreateModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.User.CreateModel.#ctor(SharedLibrary.Services.IUserService,SharedLibrary.Services.IAccountService,SharedLibrary.Services.IRightsService,SharedLibrary.Services.IDataService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="userService">User service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="rightsService">Rights service to be used</param>
            <param name="dataService">Data service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.User.CreateModel.NewUserRightsId">
            <summary>
            Id of rights for the new created user
            </summary>
            <value>Long number</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.NewUserDataDictionary">
            <summary>
            Dictionary containing string attribute name as key and list of strings as the values.
            </summary>
            <value>Dictionary of string and list of strings</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.SelectData">
            <summary>
            SelectData property contains data used for select html input fields.
            The key is attribute type and value is list of possible select values.
            </summary>
            <value>Dictionary string and list of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.UserRightsData">
            <summary>
            Enumerable of application's available user rights.
            </summary>
            <value>IEnumerable of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.User.CreateModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.User.CreateModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to User/Create.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.User.CreateModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.User.EditModel">
            <summary>
            The EditModel class in Core.Pages.User namespace is used as support for Edit.cshtml page. 
            The page is used to edit existing application user.
            </summary>
        </member>
        <member name="F:Core.Pages.User.EditModel.userService">
            <summary>
            Service for user based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.EditModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.EditModel.rightsService">
            <summary>
            Service for RightsModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.EditModel.dataService">
            <summary>
            Service for DataModel based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.EditModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.User.EditModel.#ctor(SharedLibrary.Services.IUserService,SharedLibrary.Services.IAccountService,SharedLibrary.Services.IRightsService,SharedLibrary.Services.IDataService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="userService">User service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="rightsService">Rights service to be used</param>
            <param name="dataService">Data service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.User.EditModel.UserId">
            <summary>
            Id of the user to edit.
            </summary>
            <value>long</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.UserRightsId">
            <summary>
            Id of rights for the new created user
            </summary>
            <value>Long number</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.UserDataDictionary">
            <summary>
            Dictionary containing string attribute name as key and list of strings as the values.
            </summary>
            <value>Dictionary of string and list of strings</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.SelectData">
            <summary>
            SelectData property contains data used for select html input fields.
            The key is attribute type and value is list of possible select values.
            </summary>
            <value>Dictionary string and list of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.UserRightsData">
            <summary>
            Enumerable of application's available user rights.
            </summary>
            <value>IEnumerable of SelectListItem</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.User.EditModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.User.EditModel.OnGetAsync(System.Int64)">
            <summary>
            This method is used when there is a GET request to User/Edit.cshtml page
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.User.EditModel.OnPostAsync">
            <summary>
            OnPostAsync method is invoked after clicking on Submit button.
            </summary>
            <returns>Redirect to Get page or the same page with validation messages</returns>
        </member>
        <member name="T:Core.Pages.User.GetModel">
            <summary>
            The GetModel class in Core.Pages.Users namespace is used as support for Get.cshtml page. 
            The page is used to display all application users, as well as create, edit and delete action buttons.
            </summary>
        </member>
        <member name="F:Core.Pages.User.GetModel.userService">
            <summary>
            Service for user based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.GetModel.accountService">
            <summary>
            Service for user account based requests to the server.
            </summary>
        </member>
        <member name="F:Core.Pages.User.GetModel.cache">
            <summary>
            In-memory cache service.
            </summary>
        </member>
        <member name="M:Core.Pages.User.GetModel.#ctor(SharedLibrary.Services.IUserService,SharedLibrary.Services.IAccountService,Microsoft.Extensions.Caching.Memory.IMemoryCache)">
            <summary>
            Constructor for initializing services and cache.
            </summary>
            <param name="userService">User service to be used</param>
            <param name="accountService">Account service to be used</param>
            <param name="memoryCache">Cache to be used</param>
        </member>
        <member name="P:Core.Pages.User.GetModel.ApplicationDescriptor">
            <summary>
            ApplicationDescriptor property contains descriptor of the signed user.
            </summary>
            <value>ApplicationDescriptor class</value>
        </member>
        <member name="P:Core.Pages.User.GetModel.Data">
            <summary>
            Data property contains list of UserModel to be displayed in a data table.
            </summary>
            <value>List of UserModel</value>
        </member>
        <member name="P:Core.Pages.User.GetModel.UsersRights">
            <summary>
            RightsRights property conatins user's rights to the rights dataset.async 
            This value is used for displaying Create, Edit and Delete buttons.
            </summary>
            <value>RightsEnum value.</value>
        </member>
        <member name="P:Core.Pages.User.GetModel.MenuData">
            <summary>
            MenuData property contains data necessary for _LoggedMenuPartial.
            </summary>
            <value>LoggedMenuPartialData structure</value>
        </member>
        <member name="P:Core.Pages.User.GetModel.Messages">
            <summary>
            Messages property contains list of messages for user.
            </summary>
            <value>List of Message structure</value>
        </member>
        <member name="M:Core.Pages.User.GetModel.OnGetAsync">
            <summary>
            This method is used when there is a GET request to User/Get.cshtml page.
            </summary>
            <returns>The page.</returns>
        </member>
        <member name="M:Core.Pages.User.GetModel.OnPostUserResetPasswordAsync(System.Int64)">
            <summary>
            OnPostUserResetPasswordAsync method is invoked after clicking on Reset password button.
            </summary>
            <param name="dataId">Id of user to reset password to</param>
            <returns>Login page or a page with messages</returns>
        </member>
        <member name="M:Core.Pages.User.GetModel.OnPostUserDeleteAsync(System.Int64)">
            <summary>
            OnPostUserDeleteAsync method is invoked after clicking on Delete button.
            </summary>
            <param name="dataId">Id of data to be deleted</param>
            <returns>Login page or a page with messages</returns>
        </member>
        <member name="M:Core.Pages.User.GetModel.OnPostUserCreateAsync">
            <summary>
            OnPostUserCreateAsync method is invoked after clicking on Create button
            and redirects user to create page.
            </summary>
            <returns>Redirect to create page.</returns>
        </member>
        <member name="M:Core.Pages.User.GetModel.OnPostUserEditAsync(System.String)">
            <summary>
            OnPostUserEditAsync method is invoked after clicking on Edit button 
            and redirects user to edit page.
            </summary>
            <returns>Redirect to edit page.</returns>
        </member>
        <member name="T:Core.Repositories.ApplicationRepository">
            <summary>
            Repository for ApplicationModels.
            </summary>
        </member>
        <member name="M:Core.Repositories.ApplicationRepository.#ctor(Core.DatabaseContext)">
            <summary>
            ApplicationRepository constructor calling BaseRepository constructor.
            </summary>
        </member>
        <member name="M:Core.Repositories.ApplicationRepository.GetByLoginApplicationName(System.String)">
            <summary>
            GetByLoginApplicationName method looks for applications with the same LoginApplicationName as from the parameter.
            </summary>
            <param name="loginApplicationName">Name of application to look for</param>
            <returns>Application with the same LoginApplicationName as from the parameter, if such was found.</returns>
        </member>
        <member name="T:Core.Repositories.BaseRepository`1">
            <summary>
            Repository classes are here to be the only and only one access poins to the database
            This one - BaseRepository is a parent of all the repositories, containing DatabaseContext
            and GetById(long id) method.
            Every repository class needs to inherit from this one BaseRepository class and call this 
            class' constructor and pass DatabaseContext as well as DbSet parametres on instantiation.
            </summary>
            <typeparam name="Model">DbSet type.</typeparam>
        </member>
        <member name="F:Core.Repositories.BaseRepository`1.databaseContext">
            <summary>
            Database context used to access database.
            </summary>
        </member>
        <member name="F:Core.Repositories.BaseRepository`1.model">
            <summary>
            Model of the database table.
            </summary>
        </member>
        <member name="M:Core.Repositories.BaseRepository`1.#ctor(Core.DatabaseContext,Microsoft.EntityFrameworkCore.DbSet{`0})">
            <summary>
            BaseRepository constructor.
            </summary>
            <param name="databaseContext">Database context.</param>
            <param name="model">Database table model.</param>
        </member>
        <member name="M:Core.Repositories.BaseRepository`1.GetById(System.Int64)">
            <summary>
            This method is used when the id does not need to be checked if valid.
            This method should not be used with id from user input, before previous validation.
            </summary>
            <param name="id">Model id.</param>
            <returns>Model with id from parameter if such exists.</returns>
        </member>
        <member name="M:Core.Repositories.BaseRepository`1.Add(`0)">
            <summary>
            Method for adding one model to the database.
            </summary>
            <param name="model">Model to be inserted to the database.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Core.Repositories.BaseRepository`1.Remove(`0)">
            <summary>
            Method for removing one model from the database.
            </summary>
            <param name="model">Model to be deleted.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="T:Core.Repositories.DataRepository">
            <summary>
            Repository for DataModels.
            </summary>
        </member>
        <member name="M:Core.Repositories.DataRepository.#ctor(Core.DatabaseContext)">
            <summary>
            DataRepository constructor calling BaseRepository constructor.
            </summary>
            <param name="databaseContext"></param>
        </member>
        <member name="M:Core.Repositories.DataRepository.GetById(System.Int64,System.Int64,System.Int64)">
            <summary>
            This method is used in controllers to get requested data by id only if also the application id and the dataset if is correct.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="datasetId">Id of data to filter by.</param>
            <param name="dataId">Id of entity to get.</param>
            <returns>DataModel with application id, dataset id and id from parameters if such exists.</returns>
        </member>
        <member name="M:Core.Repositories.DataRepository.GetAllByApplicationIdAndDatasetId(System.Int64,System.Int64)">
            <summary>
            This methods returns collection of DataModels filtered by application and dataset ids.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="datasetId">Id of dataset to filter by.</param>
            <returns>Collection of DataModels with application and dataset ids from parameters.</returns>
        </member>
        <member name="M:Core.Repositories.DataRepository.SetData(SharedLibrary.Models.DataModel,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            This method sets data to a DataModel.
            </summary>
            <param name="model">Model to set name and data to.</param>
            <param name="data">Dictionary of the data.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Core.Repositories.DataRepository.GetAllReferencesIdsDictionary(System.Int64)">
            <summary>
            This method returns Lists of valid database DataModel ids grouped by datasets.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <returns>Dictionary containing dataset id as key and List of valid DataModel ids as value.</returns>
        </member>
        <member name="M:Core.Repositories.DataRepository.GetAllByApplicationIdAndDatasetIdAndDataContentLike(System.Int64,System.Int64,System.String)">
            <summary>
            This method returns collection of DataModels for application and dataset from parametres, that also have 
            dataDictionaryLike value from parametres in Data attribute. This is used when looking for references.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="datasetId">Id of dataset to filter by.</param>
            <param name="dataDictionaryLike">Value to look for in Data attribute.</param>
            <returns>Collection of DataModels with Data containing value from parameter dataDictionaryLike.</returns>
        </member>
        <member name="T:Core.Repositories.RightsRepository">
            <summary>
            Repository for RightsModels.
            </summary>
        </member>
        <member name="M:Core.Repositories.RightsRepository.#ctor(Core.DatabaseContext)">
            <summary>
            RightsRepository constructor calling BaseRepository constructor.
            </summary>
        </member>
        <member name="M:Core.Repositories.RightsRepository.GetById(System.Int64,System.Int64)">
            <summary>
            The GetById method returns RightsModel entity, if such found.
            This method is used in controllers to get requested data by id only if also the application id is correct.
            </summary>
            <param name="applicationId">Application id thar the RightsModel must have.</param>
            <param name="id">Id to get from the database.</param>
            <returns>RightsModel with id and application id from parameters if such rights found.</returns>
        </member>
        <member name="M:Core.Repositories.RightsRepository.GetByApplicationIdAndName(System.Int64,System.String)">
            <summary>
            This method returns collection of RightsModels by application id and rights name.
            Only one such should exist.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="name">Name of the rights.</param>
            <returns>Collection of RightsModels.</returns>
        </member>
        <member name="M:Core.Repositories.RightsRepository.GetAllByApplicationId(System.Int64)">
            <summary>
            This method returns collection of RightsModels by application id.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <returns>Collection of all RightsModels for the application.</returns>
        </member>
        <member name="M:Core.Repositories.RightsRepository.SetNameAndData(SharedLibrary.Models.RightsModel,System.String,System.Collections.Generic.Dictionary{System.Int64,SharedLibrary.Enums.RightsEnum})">
            <summary>
            This method sets name and rights data to a RightsModel.
            </summary>
            <param name="model">RightsModel to set name and data to.</param>
            <param name="name">Name of the rights.</param>
            <param name="data">Dictionary of rights data.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="T:Core.Repositories.UserRepository">
            <summary>
            Repository for UserModels.
            </summary>
        </member>
        <member name="M:Core.Repositories.UserRepository.#ctor(Core.DatabaseContext)">
            <summary>
            UserRepository constructor calling BaseRepository constructor.
            </summary>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetById(System.Int64)">
            <summary>
            The GetById method returns UserModel entity, if such found, with Rights and Application included.
            This method should not be used with id from user input, before previous validation.
            </summary>
            <param name="id">Id to get from the database.</param>
            <returns>UserModel with id from parameter if such user found.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetById(System.Int64,System.Int64)">
            <summary>
            The GetById method returns UserModel entity, if such found, with Rights and Application included.
            This method is used in controllers to get requested data by id only if also the application id is correct.
            </summary>
            <param name="applicationId">Application id thar the UserModel must have.</param>
            <param name="id">Id to get from the database.</param>
            <returns>UserModel with id and application id from parameters if such user found.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetByApplicationIdAndUsername(System.Int64,System.String)">
            <summary>
            This method returns List of UserModels by application id and username.
            Only one such should exist.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="username">Username to filter by.</param>
            <returns>List of UserModels with application id and username from parameters.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetAllByApplicationId(System.Int64)">
            <summary>
            This method returns collection of all users for given application with Application and Rights included.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <returns>Collection of all UserModels of application from parameter.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetByRightsId(System.Int64)">
            <summary>
            This method returns collection of UserModels by rights id.
            </summary>
            <param name="rightsId">Id of rights to filter by.</param>
            <returns>Collection of UserModels with rights id from parameter.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.SetPassword(SharedLibrary.Models.UserModel,System.String)">
            <summary>
            This method sets password of UserModel from parameter to username form parameter.
            </summary>
            <param name="user">UserModel that should have the password set.</param>
            <param name="password">New password to be set.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.ResetPassword(SharedLibrary.Models.UserModel)">
            <summary>
            This method sets user password to default value (the same as the username).
            </summary>
            <param name="user">UserModel that should have the password set.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.SetRightsIdAndData(SharedLibrary.Models.UserModel,System.Int64,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            This method sets rights id and data to a UserModel.
            </summary>
            <param name="user">UserModel to set rights id and data to.</param>
            <param name="rightsId">Id of rights to be set.</param>
            <param name="data">Dictionary of the data.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetAllReferencesIdsDictionary(System.Int64)">
            <summary>
            This method returns list of valid database UserModel ids.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <returns>KeyValuePair containing SystemDatasetsEnum.Users as key and List of valid UserModel ids as value.</returns>
        </member>
        <member name="M:Core.Repositories.UserRepository.GetAllByApplicationIdAndDataContentLike(System.Int64,System.String)">
            <summary>
            This method returns collection of UserModels for application from parametres, that also have dataDictionaryLike 
            value from parametres in Data attribute. This is used when looking for references.
            </summary>
            <param name="applicationId">Id of application to filter by.</param>
            <param name="dataDictionaryLike">Value to look for in Data attribute.</param>
            <returns>Collection of UserModels with Data containing value from parameter dataDictionaryLike.</returns>
        </member>
        <member name="T:Core.Structures.GetBuilderPartialData">
            <summary>
            GetBuilderPartialData class contains properties necessary for _GetBuilderPartial.cshtml file
            to display dataset data for get requests in a correct form.
            </summary>
        </member>
        <member name="P:Core.Structures.GetBuilderPartialData.CellContent">
            <summary>
            Content that should be displayed in the cell.
            </summary>
            <value>List of objects</value>
        </member>
        <member name="P:Core.Structures.GetBuilderPartialData.Attribute">
            <summary>
            Attribute the content belongs to. This value is necessary for distinguishing between basic and reference types
            and for reference types between User dataset and user-defined datasets.
            </summary>
            <value>AttributeDescriptor</value>
        </member>
        <member name="P:Core.Structures.GetBuilderPartialData.ApplicationDescriptor">
            <summary>
            Application descriptor to get the user dataset name from.
            </summary>
            <value>ApplicationDescriptor</value>
        </member>
        <member name="T:Core.Structures.InputBuilderPartialData">
            <summary>
            InputBuilderPartialData class contains properties necessary for _InputBuilderPartial.cshtml file
            to display dataset data for create and put requests in a correct form.
            </summary>
        </member>
        <member name="P:Core.Structures.InputBuilderPartialData.Attribute">
            <summary>
            Attribute the content belongs to. This value is necessary for distinguishing between data types,
            its min and max values, if it is required, ...
            </summary>
            <value>AttributeDescriptor</value>
        </member>
        <member name="P:Core.Structures.InputBuilderPartialData.InValue">
            <summary>
            In value contains list of string values that are already selected or filled in.
            </summary>
            <value>List of strings</value>
        </member>
        <member name="P:Core.Structures.InputBuilderPartialData.OutValue">
            <summary>
            OutValue is a single string into which the filled or selcted value is stored.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Core.Structures.InputBuilderPartialData.SelectData">
            <summary>
            SelectData property contains for each referenced dataset its avaliable values that can be selected.
            </summary>
            <value>Dictionary with referenced dataset as string key and list of SelectListItem as value</value>
        </member>
        <member name="T:Core.Structures.LoggedMenuPartialData">
            <summary>
            LoggedMenuPartialData class contains properties necessary for _LoggedMenuPartial.cshtml file
            to display menu for logged user
            </summary>
        </member>
        <member name="P:Core.Structures.LoggedMenuPartialData.ApplicationName">
            <summary>
            Name of application the user is logged into.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Core.Structures.LoggedMenuPartialData.UsersDatasetName">
            <summary>
            Name of the user dataset defined in the application descriptor.
            </summary>
            <value>string</value>
        </member>
        <member name="P:Core.Structures.LoggedMenuPartialData.SystemDatasetsRights">
            <summary>
            Rights for users and rights.
            </summary>
            <value>Dictionary of long and RightsEnum</value>
        </member>
        <member name="P:Core.Structures.LoggedMenuPartialData.ReadAuthorizedDatasets">
            <summary>
            List of user defined datasets with at least read rights. These datasets will be displayed in menu.
            </summary>
            <value>List of DatasetDescriptors</value>
        </member>
        <member name="T:SharedLibrary.Helpers.DataHelper">
            <summary>
            DataHelper is a helper class used by the server application with access to the database.
            It is used for preparing the data before they are sent to the client applications by
            adding text representations to references within the data.
            </summary>
        </member>
        <member name="F:SharedLibrary.Helpers.DataHelper.referenceIndexTypeTuple">
            <summary>
            Tuple containing name and type of all reference type attributes for given dataset.
            </summary>
        </member>
        <member name="F:SharedLibrary.Helpers.DataHelper.applicationModel">
            <summary>
            Model of application the data belongs to
            </summary>
        </member>
        <member name="F:SharedLibrary.Helpers.DataHelper.referenceCache">
            <summary>
            Cache for reading and storing references
            </summary>
        </member>
        <member name="M:SharedLibrary.Helpers.DataHelper.#ctor(Core.DatabaseContext,SharedLibrary.Models.ApplicationModel,System.Int64)">
            <summary>
            DataHelper constructor is responsible for preparing reference cache and stting reference indices.
            </summary>
            <param name="databaseContext">Database context used to access the database</param>
            <param name="applicationModel">Model of application</param>
            <param name="datasetId">Id of dataset the helper will work with</param>
        </member>
        <member name="M:SharedLibrary.Helpers.DataHelper.PrepareOneRecordForClient(SharedLibrary.Models.IBaseModelWithApplicationAndData)">
            <summary>
            This method adds translations of id references to the model orom the parametres.
            </summary>
            <param name="model">Model to have the data translated</param>
        </member>
        <member name="M:SharedLibrary.Helpers.DataHelper.setReferencesIndices(System.Int64)">
            <summary>
            This method fills referenceIndexTypeTuple for given dataset with tuples of 
            attribute name-attribute type for all reference type attributes.
            </summary>
            <param name="datasetId">Id of dataset to set the references for</param>
        </member>
        <member name="M:SharedLibrary.Helpers.DataHelper.translateIDToText(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Object}})">
            <summary>
            This method adds text representation to reference ids with the help of reference cache.
            </summary>
            <param name="record">Record to get the translation for</param>
        </member>
        <member name="F:SharedLibrary.Helpers.PasswordHelper.hashAlgorithm">
            <summary>
            Algorithm used for password hash.
            </summary>
        </member>
        <member name="M:SharedLibrary.Helpers.PasswordHelper.ComputeHash(System.String)">
            <summary>
            This method computes hash of string from parameter.
            </summary>
            <param name="saltWithPassword">Salt with password to be hashed</param>
            <returns>Hashed password.</returns>
        </member>
        <member name="M:SharedLibrary.Helpers.PasswordHelper.CheckHash(System.String,System.String,System.String)">
            <summary>
            This method checks if hashed password together with salt from parametres is eaqual to 
            the hash from the parametres.
            </summary>
            <param name="salt">Salt added to the password</param>
            <param name="password">Password to validate</param>
            <param name="hash">Hash to validate password against</param>
            <returns>True if ashed password and hash are eaqual, false otherwise.</returns>
        </member>
        <member name="M:SharedLibrary.Helpers.PasswordHelper.GenerateRandomPassword(System.Int32)">
            <summary>
            This method returns a new password of length as the length parameter.
            </summary>
            <param name="length">Length of the password</param>
            <returns>New random password.</returns>
        </member>
        <member name="M:SharedLibrary.Helpers.PasswordHelper.GetSalt">
            <summary>
            This method returns a new random salt for password.
            </summary>
            <returns>New random salt for password.</returns>
        </member>
    </members>
</doc>
