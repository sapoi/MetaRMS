@using SharedLibrary.Enums 
@model RazorWebApp.Structures.InputBuilderPartialData

@if (@Model.Attribute.Type == "bool")
{
<!-- For bool type using radio -->
	<text>
		<input type="radio"
				class="form-control"
				name="@Model.OutValue"
				value="0"
	</text>
   	@if (Model.InValue != null && Model.InValue.Count() >= 1 && Model.InValue[0].ToString() == "0")
   	{
   		<text>checked</text>
   	}
	<text>
		> ❌<br>
		<input type="radio"
				class="form-control"
				name="@Model.OutValue"
				value="1"
	</text>
	@if (Model.InValue != null && Model.InValue.Count() >= 1 && Model.InValue[0].ToString() == "1")
   	{
   		<text>checked</text>
   	}
	<text>
		> ✅<br>
	</text>
	

} else if (@Model.Attribute.Type == "text")
{
<!-- For text type using textarea tag -->
	<textarea 	name="@Model.OutValue"
	       	  	class="form-control"
	       	  	rows="10"
	       	  	@if (Model.Attribute.Required == true) 
							{
	          		<text>required</text>
	       			}
	>
		@(Model.InValue != null && Model.InValue.Count() >= 1 ? Model.InValue[0] : "")
	</textarea>
} else if (AttributeType.Types.Contains(@Model.Attribute.Type))
{
<!-- For types that use input tag - all simple attribute types except bool and text -->
	<input 	name="@Model.OutValue"
			value="@(Model.InValue != null && Model.InValue.Count() >= 1 ? Model.InValue[0] : "")"
	       	class="form-control"
	       	@switch (@Model.Attribute.Type) {
	       		case "color":
	       			<text>type="color"</text>
	       			break;	
	       		case "date":
	       			<text>type="date"</text>
	       			break;
	       		case "datetime":
	       			<text>type="datetime-local"</text>
	       			break;
	       		case "email":
	       			<text>type="email"</text>
	       			break;
	       		case "month":
	       			<text>type="month"</text>
	       			break;	
	       		case "int":
	       			<text>type="number" step="1"</text>
	       			break;
	       		case "float":
	       			<text>type="number" step=any</text>
	       			break;
	       		case "year":
	       			<text>type="text" pattern="-?[0-9][0-9]?[0-9]?[0-9]?"</text>
	       			break;
	       		case "tel":
	       			<text>type="tel"</text>
	       			break;
	       		case "string":
	       			<text>type="text"</text>
	       			break;
	       		case "time":
	       			<text>type="time"</text>
	       			break;
	       		case "url":
	       			<text>type="url"</text>
	       			break;
				case "username":
	       			<text>type="text"</text>
	       			break;
				case "password":
	       			<text>type="password"</text>
	       			break;
	       		default:
	       			break;
	       	}

	       	@if (Model.Attribute.Type == "int" || Model.Attribute.Type == "float") {
	       		if (Model.Attribute.Min != null) {
	       			<text>min="@Model.Attribute.Min"</text>
	       		}
	       		if (Model.Attribute.Max != null) {
	       			<text>max="@Model.Attribute.Max"</text>
	       		}
	       	}
			@if (Model.Attribute.Type == "text" || Model.Attribute.Type == "string" ||
				 Model.Attribute.Type == "username" || Model.Attribute.Type == "password") {
				if (Model.Attribute.Max != null) {
					<text>maxlength="@Model.Attribute.Max"</text>
				}
				if (Model.Attribute.Min != null) {
					<text>minlength="@Model.Attribute.Min"</text>
				}
				if (Model.Attribute.Type == "password" && Model.Attribute.Safer == true) {
					<text>pattern="(?=^.{8,}$)((?=.*\d)|(?=.*\W+))(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$"</text>
				}
			}

	       	@if (Model.Attribute.Required == true) {
	          	<text>required</text>
			}

	    >
} else 
{
<!-- For reference types using select tag -->
	<select name="@Model.OutValue"
		class="selectpicker form-control"
		data-live-search="true"
		@if (Model.Attribute.Max == null || Model.Attribute.Max > 1) 
		{
			<text>
				multiple
				data-max-options="@Model.Attribute.Max"
			</text>
		}
		@if (Model.Attribute.Required == true) 
		{
			<text>required</text>
		}
  >
	@foreach (var item in (new SelectList(Model.SelectData[Model.Attribute.Type], "Value", "Text")))
	{
		<option value="@item.Value" 
						data-subtext=""
						selected="@(Model.InValue != null ? Model.InValue.Contains(item.Value) : false)"
		>
			@item.Text
		</option>
	}
	</select>
}



<!-- scripts onkeypress="return AllowIntegersOnly(event)" -->
@if (@Model.Attribute.Type == "year" || @Model.Attribute.Type == "int"){
	<script type="text/javascript">
	  function AllowIntegersOnly(e) {
	    var code = (e.which) ? e.which : e.keyCode;
	    if (code > 31 && (code < 48 || code > 57) && code != 45) {
	      e.preventDefault();
	    }
	  }
	</script>
}
